{"version":3,"sources":["components/Nav/index.js","components/Wrapper/index.js","components/DogCard/index.js","components/TitleJumbotron/index.js","components/Counter/index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","className","href","Wrapper","props","children","DogCard","onClick","userChoice","id","alt","name","src","image","TitleJumbotron","Jumbotron","style","backgroundColor","backgroundImage","backgroundSize","color","opacity","current","high","Counter","components_TitleJumbotron","this","React","Component","App","state","dogs","dogsClicked","handleIncrement","_this","setState","handleHigh","randomizeFunction","array","i","length","j","Math","floor","random","temp","includes","alert","push","_this2","components_Nav","components_Counter","components_Wrapper","map","dog","components_DogCard","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8aa6819e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Nav() {\n    return(\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n            <a className=\"navbar-brand\" href=\"/\">\n                Clicky Game\n            </a>\n        </nav>\n    );\n}\n\nexport default Nav;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n    return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n\nfunction DogCard(props) {\n    return(\n        <div className=\"card\">\n            <div className=\"img-container\">\n                <span onClick={() => props.userChoice(props.id)} className=\"choice\">\n                    <img alt={props.name} src={props.image} />\n                </span>\n            </div>\n            \n        </div>\n    );\n}\n\nexport default DogCard;","import React from \"react\";\nimport { Jumbotron } from \"reactstrap\";\nimport \"./style.css\"\n\n\n\n\nconst TitleJumbotron = (props) => {\n    return(\n        <div>\n            <Jumbotron style={{\n                backgroundColor: \"transparent\", \n                backgroundImage: \"url('/img/background.jpeg')\",\n                backgroundSize: \"cover\",\n                color: \"white\",\n                opacity: 0.9,\n                \n            }}>\n                <h1 className=\"display-3\">Clicky Game</h1>\n                <p className=\"lead\">Game instructions: Click on each image only once, if you click the same image twice, you lose!</p>\n                <hr className=\"my-2\" />\n                <p>Current Score: {props.current} </p>\n                \n                <p>High Score: {props.high} </p>\n                \n                \n\n            </Jumbotron>\n        </div>\n    )\n}\n\nexport default TitleJumbotron;","import React from \"react\";\nimport TitleJumbotron from \"../TitleJumbotron\";\n\n//Extending React.Compoentn class so it inherits functionality\nclass Counter extends React.Component {\n    render() {\n        return(\n            <div className=\"card text-center\">\n                \n                <TitleJumbotron \n                    current={this.props.current}\n                    high={this.props.high}\n                    \n                />\n            </div>\n        );\n    }\n}\n\nexport default Counter;","import React, { Component } from 'react';\n\nimport Nav from \"./components/Nav\";\n// import TitleJumbotron from \"./components/TitleJumbotron\";\nimport Wrapper from \"./components/Wrapper\"\nimport DogCard from \"./components/DogCard\";\nimport Counter from \"./components/Counter\"\n\nimport dogs from \"./dogs.json\"\nimport './App.css';\n\n\nclass App extends Component {\n  //Sets this.state.dogs to the dogs json array\n  state = {\n    dogs,\n    current: 0,\n    high: 0,\n    dogsClicked: []\n  };\n\n\n  handleIncrement = () => {\n    this.setState({ current: this.state.current + 1 });\n    \n};\n\n  handleHigh = () => {\n    if (this.state.current >= this.state.high)\n    this.setState({ high: this.state.current + 1 });\n  }\n\n  randomizeFunction = (array) => {\n    let i = array.length - 1;\n    for (; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n  \n\n  userChoice = (id) => {\n    \n    if (this.state.dogsClicked.includes(id)){\n      alert(\"You lost\")\n      this.setState({ current: 0 });\n      this.setState({ dogsClicked: [] });\n    } else {\n      this.state.dogsClicked.push(id);\n      this.handleIncrement();\n      this.handleHigh();\n      this.randomizeFunction(dogs);\n      \n    }\n    \n  }\n\n  render() {\n    return (\n      <div>\n        <Nav />\n        \n        <Counter \n          current={this.state.current}\n          high={this.state.high}\n        />\n        <Wrapper>\n          {/* <div className=\"image\"> */}\n\n            {dogs.map(dog => (\n              <DogCard key={dog.id} \n              id={dog.id}\n              image={dog.image}\n              userChoice={this.userChoice}\n              />\n            ))}\n          {/* </div> */}\n        </Wrapper>\n      </div>\n    );\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}